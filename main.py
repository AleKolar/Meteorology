from contextlib import asynccontextmanager
from fastapi import FastAPI
from myvenv.src_meterology.core.config import settings
from myvenv.src_meterology.routers import auth
from myvenv.src_meterology.db.database import database
from myvenv.src_meterology.core.redis import redis_client
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ Starting application initialization...")

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîå Connecting to database...")
        await database.connect()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
        logger.info("üîó Connecting to Redis...")
        await redis_client.initialize(settings.REDIS_URL)
        app.state.redis = redis_client

        logger.info("‚úÖ Application initialization completed successfully")
        yield

    except Exception as e:
        logger.error(f"‚ùå Application initialization failed: {e}")
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        await asyncio.sleep(5)
        raise

    finally:
        logger.info("üõë Shutting down application...")

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        if database.is_connected:
            try:
                logger.info("üîå Disconnecting from database...")
                await database.disconnect()
            except Exception as e:
                logger.error(f"‚ùå Error disconnecting database: {e}")

        if redis_client.is_initialized:
            try:
                logger.info("üîó Closing Redis connection...")
                await redis_client.close()
            except Exception as e:
                logger.error(f"‚ùå Error closing Redis: {e}")

        logger.info("üëã Application shutdown completed")


app = FastAPI(
    title=settings.APP_NAME,
    description="–°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π",
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router, prefix="/auth", tags=["Authentication"])

if __name__ == "__main__":
    import uvicorn

    uvicorn.run(
        app,
        host="127.0.0.1",
        port=8000,
        log_config=None,
        access_log=True,
        reload=settings.is_development
    )
    # server = uvicorn.Server(config)
    # loop.run_until_complete(server.serve())